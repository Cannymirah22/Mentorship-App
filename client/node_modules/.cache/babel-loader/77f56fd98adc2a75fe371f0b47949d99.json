{"ast":null,"code":"const chat = (state = {\n  chats: [],\n  messages: [],\n  notifications: []\n}, action) => {\n  switch (action.type) {\n    case \"FETCH_CHATS\":\n      localStorage.setItem(\"chats\", JSON.stringify(action.data.data));\n      return { ...state,\n        chats: action.data.data\n      };\n\n    case \"FETCH_MESSAGES\":\n      return { ...state,\n        messages: action.data.data\n      };\n\n    case \"CLEAR_MESSAGES\":\n      return { ...state,\n        messages: []\n      };\n\n    case \"ADD_CHATS\":\n      let chatsExisting = [...state.chats, ...action.data.data.newChatArray];\n      localStorage.setItem(\"chats\", JSON.stringify(chatsExisting));\n      return { ...state,\n        chats: chatsExisting\n      };\n\n    case \"ADD_SINGLE_CHAT\":\n      let chatsSingle = [...state.chats, action.chat];\n      localStorage.setItem(\"chats\", JSON.stringify(chatsSingle));\n      return { ...state,\n        chats: chatsSingle\n      };\n\n    case \"REORDER_CHATS\":\n      const chatId = action.id;\n\n      if (state.chats.length > 0) {\n        let index = state.chats.findIndex(chat => chat._id.toString() === chatId.toString());\n        let chat = state.chats[index];\n        state.chats.splice(index, 1);\n        state.chats.unshift(chat);\n        let newChatIndex;\n        let oldChatId;\n\n        if (localStorage.getItem(\"persistChat\") !== null) {\n          oldChatId = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n          newChatIndex = state.chats.findIndex(chat => chat._id.toString() === oldChatId.toString());\n          localStorage.setItem(\"0\", newChatIndex);\n          localStorage.setItem(\"persistChat\", JSON.stringify({\n            chatId: oldChatId,\n            chatIndex: newChatIndex\n          }));\n        }\n\n        return { ...state,\n          chats: [...state.chats]\n        };\n      }\n\n      return state;\n\n    case \"FETCH_OLDER_MESSAGES\":\n      return { ...state,\n        messages: [...state.messages, ...action.data.data]\n      };\n\n    case \"UPDATE_CHAT\":\n      const id = action.latestMessage.chat._id;\n\n      if (state.chats.length > 0) {\n        let index = state.chats.findIndex(chat => chat._id.toString() === id.toString());\n        state.chats[index].latestMessage = action.latestMessage;\n        return { ...state,\n          chats: [...state.chats]\n        };\n      }\n\n      return state;\n\n    case \"ADD_MESSAGES\":\n      return { ...state,\n        messages: [...state.messages, action.data.data]\n      };\n\n    case \"ADD_NOTIFICATION\":\n      return { ...state,\n        notifications: [...state.notifications, action.id]\n      };\n\n    case \"UPDATE_NOTIFICATION\":\n      return { ...state,\n        notifications: action.tmp\n      };\n\n    case \"LOGOUT_CHATS\":\n      return { ...state,\n        chats: [],\n        messages: [],\n        notifications: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default chat;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP App/client/src/reducers/chat.js"],"names":["chat","state","chats","messages","notifications","action","type","localStorage","setItem","JSON","stringify","data","chatsExisting","newChatArray","chatsSingle","chatId","id","length","index","findIndex","_id","toString","splice","unshift","newChatIndex","oldChatId","getItem","parse","chatIndex","latestMessage","tmp"],"mappings":"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","sourcesContent":["const chat = (state = { chats: [], messages: [], notifications: [] }, action) => {\n    switch (action.type) {\n        case \"FETCH_CHATS\":\n            localStorage.setItem(\"chats\", JSON.stringify(action.data.data));\n            return { ...state, chats: action.data.data };\n        case \"FETCH_MESSAGES\":\n            return { ...state, messages: action.data.data };\n        case \"CLEAR_MESSAGES\":\n            return { ...state, messages: [] };\n        case \"ADD_CHATS\":\n            let chatsExisting = [...state.chats, ...action.data.data.newChatArray];\n            localStorage.setItem(\"chats\", JSON.stringify(chatsExisting));\n            return { ...state, chats: chatsExisting };\n        case \"ADD_SINGLE_CHAT\":\n            let chatsSingle = [...state.chats, action.chat];\n            localStorage.setItem(\"chats\", JSON.stringify(chatsSingle));\n            return { ...state, chats: chatsSingle };\n        case \"REORDER_CHATS\":\n            const chatId = action.id;\n            if (state.chats.length > 0) {\n                let index = state.chats.findIndex(\n                    (chat) => chat._id.toString() === chatId.toString()\n                );\n\n                let chat = state.chats[index];\n                state.chats.splice(index, 1);\n                state.chats.unshift(chat);\n\n                let newChatIndex;\n                let oldChatId;\n                if (localStorage.getItem(\"persistChat\") !== null) {\n                    oldChatId = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n                    newChatIndex = state.chats.findIndex(\n                        (chat) => chat._id.toString() === oldChatId.toString()\n                    );\n                    localStorage.setItem(\"0\", newChatIndex);\n                    localStorage.setItem(\n                        \"persistChat\",\n                        JSON.stringify({\n                            chatId: oldChatId,\n                            chatIndex: newChatIndex,\n                        })\n                    );\n                }\n                return { ...state, chats: [...state.chats] };\n            }\n            return state;\n        case \"FETCH_OLDER_MESSAGES\":\n            return { ...state, messages: [...state.messages, ...action.data.data] };\n        case \"UPDATE_CHAT\":\n            const id = action.latestMessage.chat._id;\n            if (state.chats.length > 0) {\n                let index = state.chats.findIndex((chat) => chat._id.toString() === id.toString());\n                state.chats[index].latestMessage = action.latestMessage;\n                return { ...state, chats: [...state.chats] };\n            }\n            return state;\n        case \"ADD_MESSAGES\":\n            return { ...state, messages: [...state.messages, action.data.data] };\n        case \"ADD_NOTIFICATION\":\n            return { ...state, notifications: [...state.notifications, action.id] };\n        case \"UPDATE_NOTIFICATION\":\n            return { ...state, notifications: action.tmp };\n        case \"LOGOUT_CHATS\":\n            return { ...state, chats: [], messages: [], notifications: [] };\n        default:\n            return state;\n    }\n};\n\nexport default chat;\n"]},"metadata":{},"sourceType":"module"}