{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\STEPuHP App\\\\client\\\\src\\\\components\\\\dashboard\\\\mentorDashboard\\\\dashboardLinks\\\\chat\\\\chatWindow\\\\ChatWindow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { clearMessages, createMessage, getMessages, getOlderMessages, updateNotification } from \"../../../../../../actions/chat\";\nimport { useSelector } from \"react-redux\";\nimport Loading from \"../../../../../loading/Loading\";\nimport ScrollToBottom from \"./ScrollToBottom\";\nimport Message from \"./Message\";\nimport { SocketContext } from \"../../../../../../socket/socket\";\nimport { authContext } from \"../../../../../../contexts/authContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatWindow = ({\n  selectedChat,\n  curChat\n}) => {\n  _s();\n\n  const socket = React.useContext(SocketContext); // getting uid of the logged in user\n\n  const {\n    uid\n  } = useContext(authContext); // accesing global state to fetch the chats\n\n  const {\n    chats\n  } = useSelector(state => state.chat); // accessing global store for the notification array to show notifications\n\n  const {\n    notifications\n  } = useSelector(state => state.chat);\n  const dispatch = useDispatch();\n  const history = useHistory(); // div seletor for the div used as text input\n\n  var contenteditable = document.querySelector(\"[contenteditable]\");\n  /* function to check if the custom input div is empty or not to control the send button disable status */\n\n  const check = () => {\n    if (isLoading) setDisable(true);else if (contenteditable.textContent.trim() === \"\") setDisable(true);else if (selectedChat === \"\" && localStorage.getItem(\"persistChat\") === null) setDisable(true);else setDisable(false);\n    var chatId = \"\";\n\n    if (localStorage.getItem(\"persistChat\") !== null) {\n      chatId = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n    }\n\n    setMessage({\n      content: contenteditable.textContent.trim(),\n      chat: selectedChat !== \"\" ? selectedChat : chatId\n    });\n  }; // state for scroll to bottom element ----------------\n\n\n  const [ele, setEle] = useState(null);\n  useEffect(() => {\n    const element = document.getElementById(\"scrollable\");\n    setEle(element);\n  }, []);\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisible = () => {\n    if (ele.scrollTop < -100) {\n      setVisible(true);\n      localStorage.setItem(\"visible\", true);\n    } else {\n      setVisible(false);\n      localStorage.removeItem(\"visible\"); // notification removal for the move to bottom button when it is visible\n\n      if (localStorage.getItem(\"selectedChat\") !== null) {\n        const sc = localStorage.getItem(\"selectedChat\");\n        let tmp = notifications.filter(id => id !== sc);\n        dispatch(updateNotification(tmp));\n      }\n    }\n  };\n\n  const scrollToBottom = () => {\n    ele.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }; // --------------------------------------------------------------\n  // state to set the number of pages to fetch the old messages\n\n\n  const [page, setPage] = useState(2); // api call to fetch all the messages for the selected chat\n\n  useEffect(() => {\n    setPage(2);\n\n    if (selectedChat) {\n      dispatch(getMessages(history, selectedChat, 1, setIsLoading));\n      executeScroll();\n      contenteditable !== null && contenteditable.focus();\n    } else if (localStorage.getItem(\"persistChat\") !== null) {\n      const id = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n      dispatch(getMessages(history, id, 1, setIsLoading));\n      /* done this so that if selected chat is fetched from local storage\n       then if somebody sends a message and i am on this chat then notification\n       should not be shown */\n\n      localStorage.setItem(\"selectedChat\", id);\n      executeScroll();\n    } else {\n      dispatch(clearMessages());\n    }\n\n    if (contenteditable !== null) {\n      contenteditable.innerHTML = \"\";\n      check();\n    }\n\n    setVisible(false);\n  }, [selectedChat]); // state for custom placeholder in the input div\n\n  const [placeHol, setPlaceHol] = useState(\"opacity-100\"); // state to set the disable status of the send button\n\n  const [disable, setDisable] = useState(true); // state variable representing the message to be sent\n\n  const [message, setMessage] = useState({\n    content: \"\",\n    chat: \"\"\n  }); // loading state\n\n  const [isLoading, setIsLoading] = useState(false); // accessing state variable for the messages array\n\n  const {\n    messages\n  } = useSelector(state => state.chat); // function to send the text message\n\n  const sendMessage = () => {\n    dispatch(createMessage(history, message, socket, executeScroll));\n    contenteditable.innerHTML = \"\";\n    contenteditable.focus();\n    check();\n  }; // function for hiding the custom placeholder\n\n\n  const focusPlaceHol = () => {\n    setPlaceHol(\"opacity-0\");\n  }; // function for showing the custom placeholder\n\n\n  const blurPlaceHol = () => {\n    if (contenteditable.innerHTML === \"\" || contenteditable.innerHTML === \"<br>\") {\n      setPlaceHol(\"opacity-100\");\n    }\n  }; // ref used so that message can be brought into view when sent or received\n\n\n  const scrollMessage = useRef(); // function to make scroll focus to the recent post posted\n\n  const executeScroll = () => {\n    var _scrollMessage$curren;\n\n    scrollMessage === null || scrollMessage === void 0 ? void 0 : (_scrollMessage$curren = scrollMessage.current) === null || _scrollMessage$curren === void 0 ? void 0 : _scrollMessage$curren.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }; // state variable to control the loading for loding old messages\n\n\n  const [oldMessageLoading, setOldMessageLoading] = useState(false); // load Older msg\n\n  const loadOlderMessages = () => {\n    console.log(\"load more msgs\");\n    setPage(page + 1);\n    setOldMessageLoading(true);\n    dispatch(getOlderMessages(history, selectedChat, page, setOldMessageLoading));\n  };\n\n  console.log(\"chats\", chats);\n  console.log(\"message\", message);\n  console.log(\"messages\", messages); // console.log(\"selected chat\", selectedChat);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-3/5 bg-white rounded-md h-full flex-shrink-0\",\n      children: [localStorage.getItem(\"selectedChat\") && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full bg-gray-600 rounded-t-md\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-start h-full px-5 py-2.5 gap-x-4 text-white\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: curChat.avatar === \"\" ? `https://avatars.dicebear.com/api/initials/${curChat.name.split(\" \", 1)}.svg` : curChat.avatar,\n            alt: \"IMG\",\n            className: \"h-12 w-12 rounded-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: curChat.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-4/5 px-10 pb-7 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {\n          myStyle: \"w-8 h-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"scrollable\",\n        onScroll: toggleVisible,\n        className: \"w-full h-4/5 overflow-auto flex items-center flex-col-reverse px-12 pb-5 relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: scrollMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this), message.length !== 0 && messages.sort((a, b) => a.createdAt < b.createdAt ? 1 : -1).map(message => /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          uid: uid\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 37\n        }, this)), messages.length !== 0 && (oldMessageLoading ? /*#__PURE__*/_jsxDEV(Loading, {\n          myStyle: \"h-6 w-6 mb-2 mt-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadOlderMessages,\n          title: \"Load message\",\n          className: `justify-self-center p-1.5 rounded-md disabled:opacity-50 text-gray-400 text-xs bg-gray-100 mb-2 mt-1 hover:text-gray-600 transition-all`,\n          children: \"Load previous messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this), visible && /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        scrollToBottom: scrollToBottom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 29\n      }, this), localStorage.getItem(\"selectedChat\") && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-1/10 bg-gray-600 flex items-center justify-center gap-x-6 mt-1 rounded-b-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-17/20 flex-shrink-0 relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onFocus: focusPlaceHol,\n            onBlur: blurPlaceHol,\n            onKeyUp: check,\n            contentEditable: true,\n            className: \"px-2 py-3 rounded-md max-h-16 bg-white outline-none break-words overflow-y-auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: `text-gray-400 absolute top-3 left-2 pointer-events-none ${placeHol}`,\n            children: \"Type something...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          title: \"Send message\",\n          className: `bg-green-500 p-2.5 rounded-md disabled:opacity-50 text-white`,\n          onClick: sendMessage,\n          disabled: disable,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChatWindow, \"ZZn14UjuYMiC2iKgiWLnZIa+DvE=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory, useSelector];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP App/client/src/components/dashboard/mentorDashboard/dashboardLinks/chat/chatWindow/ChatWindow.js"],"names":["React","useContext","useRef","useState","useEffect","useDispatch","useHistory","clearMessages","createMessage","getMessages","getOlderMessages","updateNotification","useSelector","Loading","ScrollToBottom","Message","SocketContext","authContext","ChatWindow","selectedChat","curChat","socket","uid","chats","state","chat","notifications","dispatch","history","contenteditable","document","querySelector","check","isLoading","setDisable","textContent","trim","localStorage","getItem","chatId","JSON","parse","setMessage","content","ele","setEle","element","getElementById","visible","setVisible","toggleVisible","scrollTop","setItem","removeItem","sc","tmp","filter","id","scrollToBottom","scrollTo","top","behavior","page","setPage","setIsLoading","executeScroll","focus","innerHTML","placeHol","setPlaceHol","disable","message","messages","sendMessage","focusPlaceHol","blurPlaceHol","scrollMessage","current","scrollIntoView","oldMessageLoading","setOldMessageLoading","loadOlderMessages","console","log","avatar","name","split","length","sort","a","b","createdAt","map","_id"],"mappings":"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","sourcesContent":["import React, { useContext, useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    clearMessages,\n    createMessage,\n    getMessages,\n    getOlderMessages,\n    updateNotification,\n} from \"../../../../../../actions/chat\";\nimport { useSelector } from \"react-redux\";\n\nimport Loading from \"../../../../../loading/Loading\";\nimport ScrollToBottom from \"./ScrollToBottom\";\nimport Message from \"./Message\";\nimport { SocketContext } from \"../../../../../../socket/socket\";\nimport { authContext } from \"../../../../../../contexts/authContext\";\n\nconst ChatWindow = ({ selectedChat, curChat }) => {\n    const socket = React.useContext(SocketContext);\n\n    // getting uid of the logged in user\n    const { uid } = useContext(authContext);\n\n    // accesing global state to fetch the chats\n    const { chats } = useSelector((state) => state.chat);\n\n    // accessing global store for the notification array to show notifications\n    const { notifications } = useSelector((state) => state.chat);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // div seletor for the div used as text input\n    var contenteditable = document.querySelector(\"[contenteditable]\");\n\n    /* function to check if the custom input div is empty or not to control the send button disable status */\n    const check = () => {\n        if (isLoading) setDisable(true);\n        else if (contenteditable.textContent.trim() === \"\") setDisable(true);\n        else if (selectedChat === \"\" && localStorage.getItem(\"persistChat\") === null)\n            setDisable(true);\n        else setDisable(false);\n\n        var chatId = \"\";\n        if (localStorage.getItem(\"persistChat\") !== null) {\n            chatId = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n        }\n        setMessage({\n            content: contenteditable.textContent.trim(),\n            chat: selectedChat !== \"\" ? selectedChat : chatId,\n        });\n    };\n\n    // state for scroll to bottom element ----------------\n    const [ele, setEle] = useState(null);\n\n    useEffect(() => {\n        const element = document.getElementById(\"scrollable\");\n        setEle(element);\n    }, []);\n\n    const [visible, setVisible] = useState(false);\n\n    const toggleVisible = () => {\n        if (ele.scrollTop < -100) {\n            setVisible(true);\n            localStorage.setItem(\"visible\", true);\n        } else {\n            setVisible(false);\n            localStorage.removeItem(\"visible\");\n            // notification removal for the move to bottom button when it is visible\n            if (localStorage.getItem(\"selectedChat\") !== null) {\n                const sc = localStorage.getItem(\"selectedChat\");\n                let tmp = notifications.filter((id) => id !== sc);\n                dispatch(updateNotification(tmp));\n            }\n        }\n    };\n\n    const scrollToBottom = () => {\n        ele.scrollTo({\n            top: 0,\n            behavior: \"smooth\",\n        });\n    };\n    // --------------------------------------------------------------\n\n    // state to set the number of pages to fetch the old messages\n    const [page, setPage] = useState(2);\n\n    // api call to fetch all the messages for the selected chat\n    useEffect(() => {\n        setPage(2);\n        if (selectedChat) {\n            dispatch(getMessages(history, selectedChat, 1, setIsLoading));\n            executeScroll();\n            contenteditable !== null && contenteditable.focus();\n        } else if (localStorage.getItem(\"persistChat\") !== null) {\n            const id = JSON.parse(localStorage.getItem(\"persistChat\")).chatId;\n            dispatch(getMessages(history, id, 1, setIsLoading));\n            /* done this so that if selected chat is fetched from local storage\n             then if somebody sends a message and i am on this chat then notification\n             should not be shown */\n            localStorage.setItem(\"selectedChat\", id);\n            executeScroll();\n        } else {\n            dispatch(clearMessages());\n        }\n        if (contenteditable !== null) {\n            contenteditable.innerHTML = \"\";\n            check();\n        }\n        setVisible(false);\n    }, [selectedChat]);\n\n    // state for custom placeholder in the input div\n    const [placeHol, setPlaceHol] = useState(\"opacity-100\");\n    // state to set the disable status of the send button\n    const [disable, setDisable] = useState(true);\n    // state variable representing the message to be sent\n    const [message, setMessage] = useState({\n        content: \"\",\n        chat: \"\",\n    });\n\n    // loading state\n    const [isLoading, setIsLoading] = useState(false);\n\n    // accessing state variable for the messages array\n    const { messages } = useSelector((state) => state.chat);\n\n    // function to send the text message\n    const sendMessage = () => {\n        dispatch(createMessage(history, message, socket, executeScroll));\n        contenteditable.innerHTML = \"\";\n        contenteditable.focus();\n        check();\n    };\n\n    // function for hiding the custom placeholder\n    const focusPlaceHol = () => {\n        setPlaceHol(\"opacity-0\");\n    };\n\n    // function for showing the custom placeholder\n    const blurPlaceHol = () => {\n        if (contenteditable.innerHTML === \"\" || contenteditable.innerHTML === \"<br>\") {\n            setPlaceHol(\"opacity-100\");\n        }\n    };\n\n    // ref used so that message can be brought into view when sent or received\n    const scrollMessage = useRef();\n\n    // function to make scroll focus to the recent post posted\n    const executeScroll = () => {\n        scrollMessage?.current?.scrollIntoView({\n            behavior: \"smooth\",\n        });\n    };\n\n    // state variable to control the loading for loding old messages\n    const [oldMessageLoading, setOldMessageLoading] = useState(false);\n    // load Older msg\n    const loadOlderMessages = () => {\n        console.log(\"load more msgs\");\n        setPage(page + 1);\n        setOldMessageLoading(true);\n        dispatch(getOlderMessages(history, selectedChat, page, setOldMessageLoading));\n    };\n\n    console.log(\"chats\", chats);\n    console.log(\"message\", message);\n    console.log(\"messages\", messages);\n    // console.log(\"selected chat\", selectedChat);\n\n    return (\n        <>\n            <div className=\"w-3/5 bg-white rounded-md h-full flex-shrink-0\">\n                {localStorage.getItem(\"selectedChat\") && (\n                    <div className=\"w-full bg-gray-600 rounded-t-md\">\n                        <div className=\"flex items-center justify-start h-full px-5 py-2.5 gap-x-4 text-white\">\n                            <img\n                                src={\n                                    curChat.avatar === \"\"\n                                        ? `https://avatars.dicebear.com/api/initials/${curChat.name.split(\n                                              \" \",\n                                              1\n                                          )}.svg`\n                                        : curChat.avatar\n                                }\n                                alt=\"IMG\"\n                                className=\"h-12 w-12 rounded-full\"\n                            />\n                            <h4>{curChat.name}</h4>\n                        </div>\n                    </div>\n                )}\n                {isLoading ? (\n                    <div className=\"w-full h-4/5 px-10 pb-7 flex items-center justify-center\">\n                        <Loading myStyle={\"w-8 h-8\"} />\n                    </div>\n                ) : (\n                    <div\n                        id=\"scrollable\"\n                        onScroll={toggleVisible}\n                        className=\"w-full h-4/5 overflow-auto flex items-center flex-col-reverse px-12 pb-5 relative\"\n                    >\n                        <div ref={scrollMessage}></div>\n                        {message.length !== 0 &&\n                            messages\n                                .sort((a, b) => (a.createdAt < b.createdAt ? 1 : -1))\n                                .map((message) => (\n                                    <Message key={message._id} message={message} uid={uid} />\n                                ))}\n                        {messages.length !== 0 &&\n                            (oldMessageLoading ? (\n                                <Loading myStyle={\"h-6 w-6 mb-2 mt-1\"} />\n                            ) : (\n                                <button\n                                    onClick={loadOlderMessages}\n                                    title=\"Load message\"\n                                    className={`justify-self-center p-1.5 rounded-md disabled:opacity-50 text-gray-400 text-xs bg-gray-100 mb-2 mt-1 hover:text-gray-600 transition-all`}\n                                >\n                                    Load previous messages\n                                </button>\n                            ))}\n                    </div>\n                )}\n\n                {visible && <ScrollToBottom scrollToBottom={scrollToBottom} />}\n\n                {localStorage.getItem(\"selectedChat\") && (\n                    <div className=\"w-full h-1/10 bg-gray-600 flex items-center justify-center gap-x-6 mt-1 rounded-b-md\">\n                        <div className=\"w-17/20 flex-shrink-0 relative\">\n                            <div\n                                onFocus={focusPlaceHol}\n                                onBlur={blurPlaceHol}\n                                onKeyUp={check}\n                                contentEditable={true}\n                                className=\"px-2 py-3 rounded-md max-h-16 bg-white outline-none break-words overflow-y-auto\"\n                            ></div>\n                            <h4\n                                className={`text-gray-400 absolute top-3 left-2 pointer-events-none ${placeHol}`}\n                            >\n                                Type something...\n                            </h4>\n                        </div>\n\n                        <button\n                            title=\"Send message\"\n                            className={`bg-green-500 p-2.5 rounded-md disabled:opacity-50 text-white`}\n                            onClick={sendMessage}\n                            disabled={disable}\n                        >\n                            Send\n                        </button>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}