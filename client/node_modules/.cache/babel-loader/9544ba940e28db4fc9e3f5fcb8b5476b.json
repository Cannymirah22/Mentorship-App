{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport * as api from \"../api/chat\";\nimport { showToast } from \"../components/toast/toast\";\nexport const createChat = (history, setShowModal, chatIds) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createChat(chatIds);\n    console.log(\"chat created data\", data);\n    setShowModal(false);\n\n    if (data.code === 409) {\n      dispatch(getAllChat());\n    } else if (data.code === 200) {\n      dispatch({\n        type: \"ADD_CHATS\",\n        data\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const reorderChats = id => async dispatch => {\n  try {\n    dispatch({\n      type: \"REORDER_CHATS\",\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addSingleChat = chat => async dispatch => {\n  try {\n    dispatch({\n      type: \"ADD_SINGLE_CHAT\",\n      chat\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addNotification = id => async dispatch => {\n  try {\n    dispatch({\n      type: \"ADD_NOTIFICATION\",\n      id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateLatestMessage = data => async dispatch => {\n  try {\n    const latestMessage = data.data;\n    dispatch({\n      type: \"UPDATE_CHAT\",\n      latestMessage\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAllChat = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchChat();\n    console.log(\"chat data\", data);\n\n    if (data.code === 200) {\n      return dispatch({\n        type: \"FETCH_CHATS\",\n        data\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createMessage = (history, message, socket, executeScroll) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createMessage(message);\n    console.log(\"message created data\", data);\n\n    if (data.code === 200) {\n      dispatch(addMessages(data));\n      executeScroll();\n      dispatch(updateLatestMessage(data));\n      dispatch(reorderChats(message.chat));\n      socket.emit(\"newMessage\", data);\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getMessages = (history, chatId, page, setIsLoading) => async dispatch => {\n  try {\n    setIsLoading(true);\n    const {\n      data\n    } = await api.getMessages(chatId, page);\n    console.log(\"message get data\", data);\n    setIsLoading(false);\n\n    if (data.code === 200) {\n      dispatch({\n        type: \"FETCH_MESSAGES\",\n        data\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addMessages = data => async dispatch => {\n  try {\n    dispatch({\n      type: \"ADD_MESSAGES\",\n      data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOlderMessages = (history, chatId, page, setOldMessageLoading) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getMessages(chatId, page);\n    console.log(\"older message get data\", data);\n\n    if (data.code === 200) {\n      dispatch({\n        type: \"FETCH_OLDER_MESSAGES\",\n        data\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n\n    setOldMessageLoading(false);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateNotification = tmp => async dispatch => {\n  try {\n    dispatch({\n      type: \"UPDATE_NOTIFICATION\",\n      tmp\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const clearMessages = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"CLEAR_MESSAGES\"\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logoutChats = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGOUT_CHATS\"\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP App/client/src/actions/chat.js"],"names":["toast","api","showToast","createChat","history","setShowModal","chatIds","dispatch","data","console","log","code","getAllChat","type","msg","POSITION","BOTTOM_LEFT","error","reorderChats","id","addSingleChat","chat","addNotification","updateLatestMessage","latestMessage","fetchChat","createMessage","message","socket","executeScroll","addMessages","emit","getMessages","chatId","page","setIsLoading","getOlderMessages","setOldMessageLoading","updateNotification","tmp","clearMessages","logoutChats"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\nimport * as api from \"../api/chat\";\nimport { showToast } from \"../components/toast/toast\";\n\nexport const createChat = (history, setShowModal, chatIds) => async (dispatch) => {\n    try {\n        const { data } = await api.createChat(chatIds);\n        console.log(\"chat created data\", data);\n        setShowModal(false);\n\n        if (data.code === 409) {\n            dispatch(getAllChat());\n        } else if (data.code === 200) {\n            dispatch({ type: \"ADD_CHATS\", data });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const reorderChats = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: \"REORDER_CHATS\", id });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const addSingleChat = (chat) => async (dispatch) => {\n    try {\n        dispatch({ type: \"ADD_SINGLE_CHAT\", chat });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const addNotification = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: \"ADD_NOTIFICATION\", id });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const updateLatestMessage = (data) => async (dispatch) => {\n    try {\n        const latestMessage = data.data;\n        dispatch({ type: \"UPDATE_CHAT\", latestMessage });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getAllChat = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchChat();\n        console.log(\"chat data\", data);\n\n        if (data.code === 200) {\n            return dispatch({ type: \"FETCH_CHATS\", data });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const createMessage = (history, message, socket, executeScroll) => async (dispatch) => {\n    try {\n        const { data } = await api.createMessage(message);\n        console.log(\"message created data\", data);\n\n        if (data.code === 200) {\n            dispatch(addMessages(data));\n            executeScroll();\n            dispatch(updateLatestMessage(data));\n            dispatch(reorderChats(message.chat));\n            socket.emit(\"newMessage\", data);\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMessages = (history, chatId, page, setIsLoading) => async (dispatch) => {\n    try {\n        setIsLoading(true);\n        const { data } = await api.getMessages(chatId, page);\n        console.log(\"message get data\", data);\n        setIsLoading(false);\n\n        if (data.code === 200) {\n            dispatch({ type: \"FETCH_MESSAGES\", data });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const addMessages = (data) => async (dispatch) => {\n    try {\n        dispatch({ type: \"ADD_MESSAGES\", data });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getOlderMessages =\n    (history, chatId, page, setOldMessageLoading) => async (dispatch) => {\n        try {\n            const { data } = await api.getMessages(chatId, page);\n            console.log(\"older message get data\", data);\n\n            if (data.code === 200) {\n                dispatch({ type: \"FETCH_OLDER_MESSAGES\", data });\n            } else {\n                showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n            }\n            setOldMessageLoading(false);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\nexport const updateNotification = (tmp) => async (dispatch) => {\n    try {\n        dispatch({ type: \"UPDATE_NOTIFICATION\", tmp });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const clearMessages = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"CLEAR_MESSAGES\" });\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const logoutChats = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"LOGOUT_CHATS\" });\n    } catch (error) {\n        console.log(error);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}