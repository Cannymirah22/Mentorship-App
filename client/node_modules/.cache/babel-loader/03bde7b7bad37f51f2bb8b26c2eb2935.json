{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport * as api from \"../api/notification\";\nimport { showToast } from \"../components/toast/toast\";\nimport { getMeetings } from \"./meeting\";\nimport { getAllPosts } from \"./post\";\nexport const getAllNotifications = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getAllNotifications();\n    console.log(\"notifications in action\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const notifications = data.data;\n      return dispatch({\n        type: \"FETCH_NOTIFICATIONS\",\n        notifications\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addGlobalNotification = (history, notification) => async dispatch => {\n  try {\n    dispatch({\n      type: \"ADD_GLOBAL_NOTIFICATION\",\n      notification\n    });\n    dispatch(getAllPosts(history, 1, undefined));\n    dispatch(getMeetings());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const markNotificationRead = (history, notificationIds, setLoading) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.markNotificationRead(notificationIds);\n    console.log(\"notifications marked in action\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const ids = data.data.read;\n      dispatch({\n        type: \"MARK_NOTIFICATION_READ\",\n        ids\n      });\n      if (setLoading) setLoading(false);\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logoutNotifications = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGOUT_NOTIFICATIONS\"\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP App/client/src/actions/notification.js"],"names":["toast","api","showToast","getMeetings","getAllPosts","getAllNotifications","dispatch","data","console","log","code","notifications","type","msg","POSITION","BOTTOM_LEFT","error","addGlobalNotification","history","notification","undefined","markNotificationRead","notificationIds","setLoading","ids","read","logoutNotifications"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,qBAArB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,WAAT,QAA4B,QAA5B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACzD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAACI,mBAAJ,EAAvB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,IAAvC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACG,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMC,aAAa,GAAGJ,IAAI,CAACA,IAA3B;AACA,aAAOD,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE,qBAAR;AAA+BD,QAAAA;AAA/B,OAAD,CAAf;AACH,KAHD,MAGO;AACHT,MAAAA,SAAS,CAAC,OAAD,EAAUK,IAAI,CAACM,GAAf,EAAoB,KAApB,EAA2Bb,KAAK,CAACc,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMC,qBAAqB,GAAG,CAACC,OAAD,EAAUC,YAAV,KAA2B,MAAOb,QAAP,IAAoB;AAChF,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE,yBAAR;AAAmCO,MAAAA;AAAnC,KAAD,CAAR;AACAb,IAAAA,QAAQ,CAACF,WAAW,CAACc,OAAD,EAAU,CAAV,EAAaE,SAAb,CAAZ,CAAR;AACAd,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AACH,GAJD,CAIE,OAAOa,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMK,oBAAoB,GAAG,CAACH,OAAD,EAAUI,eAAV,EAA2BC,UAA3B,KAA0C,MAAOjB,QAAP,IAAoB;AAC9F,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAACoB,oBAAJ,CAAyBC,eAAzB,CAAvB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,IAA9C,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACG,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMc,GAAG,GAAGjB,IAAI,CAACA,IAAL,CAAUkB,IAAtB;AACAnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE,wBAAR;AAAkCY,QAAAA;AAAlC,OAAD,CAAR;AACA,UAAID,UAAJ,EAAgBA,UAAU,CAAC,KAAD,CAAV;AACnB,KAJD,MAIO;AACHrB,MAAAA,SAAS,CAAC,OAAD,EAAUK,IAAI,CAACM,GAAf,EAAoB,KAApB,EAA2Bb,KAAK,CAACc,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAZD,CAYE,OAAOC,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMU,mBAAmB,GAAG,MAAM,MAAOpB,QAAP,IAAoB;AACzD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAFD,CAEE,OAAOI,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CANM","sourcesContent":["import { toast } from \"react-toastify\";\nimport * as api from \"../api/notification\";\nimport { showToast } from \"../components/toast/toast\";\nimport { getMeetings } from \"./meeting\";\nimport { getAllPosts } from \"./post\";\n\nexport const getAllNotifications = () => async (dispatch) => {\n    try {\n        const { data } = await api.getAllNotifications();\n        console.log(\"notifications in action\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const notifications = data.data;\n            return dispatch({ type: \"FETCH_NOTIFICATIONS\", notifications });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const addGlobalNotification = (history, notification) => async (dispatch) => {\n    try {\n        dispatch({ type: \"ADD_GLOBAL_NOTIFICATION\", notification });\n        dispatch(getAllPosts(history, 1, undefined));\n        dispatch(getMeetings());\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const markNotificationRead = (history, notificationIds, setLoading) => async (dispatch) => {\n    try {\n        const { data } = await api.markNotificationRead(notificationIds);\n        console.log(\"notifications marked in action\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const ids = data.data.read;\n            dispatch({ type: \"MARK_NOTIFICATION_READ\", ids });\n            if (setLoading) setLoading(false);\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const logoutNotifications = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"LOGOUT_NOTIFICATIONS\" });\n    } catch (error) {\n        console.log(error);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}