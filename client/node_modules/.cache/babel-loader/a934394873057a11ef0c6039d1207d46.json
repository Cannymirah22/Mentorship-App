{"ast":null,"code":"const notification = (state = {\n  notifications: []\n}, action) => {\n  switch (action.type) {\n    case \"FETCH_NOTIFICATIONS\":\n      return { ...state,\n        notifications: action.notifications\n      };\n\n    case \"ADD_GLOBAL_NOTIFICATION\":\n      state.notifications.push(action.notification);\n      return { ...state,\n        notifications: [...state.notifications]\n      };\n\n    case \"MARK_NOTIFICATION_READ\":\n      let notiMap = {};\n      state.notifications.forEach(notification => {\n        if (!notiMap[notification._id]) notiMap[notification._id] = notification;\n      });\n      action.ids.forEach(noti => {\n        if (notiMap[noti._id]) notiMap[noti._id] = noti;\n      });\n      let updatedNotifications = [];\n\n      for (const n in notiMap) {\n        updatedNotifications.push(notiMap[n]);\n      }\n\n      return { ...state,\n        notifications: updatedNotifications\n      };\n\n    case \"LOGOUT_NOTIFICATIONS\":\n      return { ...state,\n        notifications: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default notification;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP/Student_Mentoring_System-main/client/src/reducers/notification.js"],"names":["notification","state","notifications","action","type","push","notiMap","forEach","_id","ids","noti","updatedNotifications","n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,aAAa,EAAE;AAAjB,CAAT,EAAgCC,MAAhC,KAA2C;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYC,QAAAA,aAAa,EAAEC,MAAM,CAACD;AAAlC,OAAP;;AACJ,SAAK,yBAAL;AACID,MAAAA,KAAK,CAACC,aAAN,CAAoBG,IAApB,CAAyBF,MAAM,CAACH,YAAhC;AACA,aAAO,EAAE,GAAGC,KAAL;AAAYC,QAAAA,aAAa,EAAE,CAAC,GAAGD,KAAK,CAACC,aAAV;AAA3B,OAAP;;AACJ,SAAK,wBAAL;AACI,UAAII,OAAO,GAAG,EAAd;AACAL,MAAAA,KAAK,CAACC,aAAN,CAAoBK,OAApB,CAA6BP,YAAD,IAAkB;AAC1C,YAAI,CAACM,OAAO,CAACN,YAAY,CAACQ,GAAd,CAAZ,EAAgCF,OAAO,CAACN,YAAY,CAACQ,GAAd,CAAP,GAA4BR,YAA5B;AACnC,OAFD;AAGAG,MAAAA,MAAM,CAACM,GAAP,CAAWF,OAAX,CAAoBG,IAAD,IAAU;AACzB,YAAIJ,OAAO,CAACI,IAAI,CAACF,GAAN,CAAX,EAAuBF,OAAO,CAACI,IAAI,CAACF,GAAN,CAAP,GAAoBE,IAApB;AAC1B,OAFD;AAGA,UAAIC,oBAAoB,GAAG,EAA3B;;AACA,WAAK,MAAMC,CAAX,IAAgBN,OAAhB,EAAyB;AACrBK,QAAAA,oBAAoB,CAACN,IAArB,CAA0BC,OAAO,CAACM,CAAD,CAAjC;AACH;;AACD,aAAO,EAAE,GAAGX,KAAL;AAAYC,QAAAA,aAAa,EAAES;AAA3B,OAAP;;AACJ,SAAK,sBAAL;AACI,aAAO,EAAE,GAAGV,KAAL;AAAYC,QAAAA,aAAa,EAAE;AAA3B,OAAP;;AACJ;AACI,aAAOD,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,YAAf","sourcesContent":["const notification = (state = { notifications: [] }, action) => {\n    switch (action.type) {\n        case \"FETCH_NOTIFICATIONS\":\n            return { ...state, notifications: action.notifications };\n        case \"ADD_GLOBAL_NOTIFICATION\":\n            state.notifications.push(action.notification);\n            return { ...state, notifications: [...state.notifications] };\n        case \"MARK_NOTIFICATION_READ\":\n            let notiMap = {};\n            state.notifications.forEach((notification) => {\n                if (!notiMap[notification._id]) notiMap[notification._id] = notification;\n            });\n            action.ids.forEach((noti) => {\n                if (notiMap[noti._id]) notiMap[noti._id] = noti;\n            });\n            let updatedNotifications = [];\n            for (const n in notiMap) {\n                updatedNotifications.push(notiMap[n]);\n            }\n            return { ...state, notifications: updatedNotifications };\n        case \"LOGOUT_NOTIFICATIONS\":\n            return { ...state, notifications: [] };\n        default:\n            return state;\n    }\n};\n\nexport default notification;\n"]},"metadata":{},"sourceType":"module"}