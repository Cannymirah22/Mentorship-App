{"ast":null,"code":"const post = (state = {\n  posts: [],\n  comments: []\n}, action) => {\n  switch (action.type) {\n    case \"FETCH_POSTS\":\n      return { ...state,\n        posts: action.posts\n      };\n\n    case \"ADD_SINGLE_POST\":\n      return { ...state,\n        posts: [...state.posts, action.post]\n      };\n\n    case \"FETCH_OLDER_POSTS\":\n      return { ...state,\n        posts: [...state.posts, ...action.posts]\n      };\n\n    case \"UPDATE_POST\":\n      let pos;\n      state.posts.forEach((post, i) => {\n        if (post.postData._id === action.post.postData._id) {\n          pos = i;\n        }\n      });\n      state.posts[pos] = action.post;\n      return { ...state,\n        posts: [...state.posts]\n      };\n\n    case \"DELETE_POST\":\n      let filteredPosts = [];\n      state.posts.forEach(post => {\n        if (post.postData._id !== action.post._id) {\n          filteredPosts.push(post);\n        }\n      });\n      return { ...state,\n        posts: filteredPosts,\n        comments: []\n      };\n\n    case \"FETCH_COMMENTS\":\n      return { ...state,\n        comments: action.comments\n      };\n\n    case \"ADD_SINGLE_COMMENT\":\n      state.comments.push(action.comment);\n      return { ...state,\n        comments: [...state.comments]\n      };\n\n    case \"DELETE_COMMENT\":\n      let filteredComments = [];\n      state.comments.forEach(comment => {\n        if (comment.commentData._id !== action.comment.commentData._id) {\n          filteredComments.push(comment);\n        }\n      });\n      return { ...state,\n        comments: filteredComments\n      };\n\n    case \"LOGOUT_POSTS\":\n      return { ...state,\n        posts: [],\n        comments: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default post;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/STEPuHP/Student_Mentoring_System-main/client/src/reducers/post.js"],"names":["post","state","posts","comments","action","type","pos","forEach","i","postData","_id","filteredPosts","push","comment","filteredComments","commentData"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,QAAQ,EAAE;AAAvB,CAAT,EAAsCC,MAAtC,KAAiD;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,aAAO,EAAE,GAAGJ,KAAL;AAAYC,QAAAA,KAAK,EAAEE,MAAM,CAACF;AAA1B,OAAP;;AACJ,SAAK,iBAAL;AACI,aAAO,EAAE,GAAGD,KAAL;AAAYC,QAAAA,KAAK,EAAE,CAAC,GAAGD,KAAK,CAACC,KAAV,EAAiBE,MAAM,CAACJ,IAAxB;AAAnB,OAAP;;AACJ,SAAK,mBAAL;AACI,aAAO,EAAE,GAAGC,KAAL;AAAYC,QAAAA,KAAK,EAAE,CAAC,GAAGD,KAAK,CAACC,KAAV,EAAiB,GAAGE,MAAM,CAACF,KAA3B;AAAnB,OAAP;;AACJ,SAAK,aAAL;AACI,UAAII,GAAJ;AACAL,MAAAA,KAAK,CAACC,KAAN,CAAYK,OAAZ,CAAoB,CAACP,IAAD,EAAOQ,CAAP,KAAa;AAC7B,YAAIR,IAAI,CAACS,QAAL,CAAcC,GAAd,KAAsBN,MAAM,CAACJ,IAAP,CAAYS,QAAZ,CAAqBC,GAA/C,EAAoD;AAChDJ,UAAAA,GAAG,GAAGE,CAAN;AACH;AACJ,OAJD;AAKAP,MAAAA,KAAK,CAACC,KAAN,CAAYI,GAAZ,IAAmBF,MAAM,CAACJ,IAA1B;AACA,aAAO,EAAE,GAAGC,KAAL;AAAYC,QAAAA,KAAK,EAAE,CAAC,GAAGD,KAAK,CAACC,KAAV;AAAnB,OAAP;;AACJ,SAAK,aAAL;AACI,UAAIS,aAAa,GAAG,EAApB;AACAV,MAAAA,KAAK,CAACC,KAAN,CAAYK,OAAZ,CAAqBP,IAAD,IAAU;AAC1B,YAAIA,IAAI,CAACS,QAAL,CAAcC,GAAd,KAAsBN,MAAM,CAACJ,IAAP,CAAYU,GAAtC,EAA2C;AACvCC,UAAAA,aAAa,CAACC,IAAd,CAAmBZ,IAAnB;AACH;AACJ,OAJD;AAKA,aAAO,EAAE,GAAGC,KAAL;AAAYC,QAAAA,KAAK,EAAES,aAAnB;AAAkCR,QAAAA,QAAQ,EAAE;AAA5C,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYE,QAAAA,QAAQ,EAAEC,MAAM,CAACD;AAA7B,OAAP;;AACJ,SAAK,oBAAL;AACIF,MAAAA,KAAK,CAACE,QAAN,CAAeS,IAAf,CAAoBR,MAAM,CAACS,OAA3B;AACA,aAAO,EAAE,GAAGZ,KAAL;AAAYE,QAAAA,QAAQ,EAAE,CAAC,GAAGF,KAAK,CAACE,QAAV;AAAtB,OAAP;;AACJ,SAAK,gBAAL;AACI,UAAIW,gBAAgB,GAAG,EAAvB;AACAb,MAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAwBM,OAAD,IAAa;AAChC,YAAIA,OAAO,CAACE,WAAR,CAAoBL,GAApB,KAA4BN,MAAM,CAACS,OAAP,CAAeE,WAAf,CAA2BL,GAA3D,EAAgE;AAC5DI,UAAAA,gBAAgB,CAACF,IAAjB,CAAsBC,OAAtB;AACH;AACJ,OAJD;AAKA,aAAO,EAAE,GAAGZ,KAAL;AAAYE,QAAAA,QAAQ,EAAEW;AAAtB,OAAP;;AACJ,SAAK,cAAL;AACI,aAAO,EAAE,GAAGb,KAAL;AAAYC,QAAAA,KAAK,EAAE,EAAnB;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OAAP;;AACJ;AACI,aAAOF,KAAP;AAxCR;AA0CH,CA3CD;;AA6CA,eAAeD,IAAf","sourcesContent":["const post = (state = { posts: [], comments: [] }, action) => {\n    switch (action.type) {\n        case \"FETCH_POSTS\":\n            return { ...state, posts: action.posts };\n        case \"ADD_SINGLE_POST\":\n            return { ...state, posts: [...state.posts, action.post] };\n        case \"FETCH_OLDER_POSTS\":\n            return { ...state, posts: [...state.posts, ...action.posts] };\n        case \"UPDATE_POST\":\n            let pos;\n            state.posts.forEach((post, i) => {\n                if (post.postData._id === action.post.postData._id) {\n                    pos = i;\n                }\n            });\n            state.posts[pos] = action.post;\n            return { ...state, posts: [...state.posts] };\n        case \"DELETE_POST\":\n            let filteredPosts = [];\n            state.posts.forEach((post) => {\n                if (post.postData._id !== action.post._id) {\n                    filteredPosts.push(post);\n                }\n            });\n            return { ...state, posts: filteredPosts, comments: [] };\n        case \"FETCH_COMMENTS\":\n            return { ...state, comments: action.comments };\n        case \"ADD_SINGLE_COMMENT\":\n            state.comments.push(action.comment);\n            return { ...state, comments: [...state.comments] };\n        case \"DELETE_COMMENT\":\n            let filteredComments = [];\n            state.comments.forEach((comment) => {\n                if (comment.commentData._id !== action.comment.commentData._id) {\n                    filteredComments.push(comment);\n                }\n            });\n            return { ...state, comments: filteredComments };\n        case \"LOGOUT_POSTS\":\n            return { ...state, posts: [], comments: [] };\n        default:\n            return state;\n    }\n};\n\nexport default post;\n"]},"metadata":{},"sourceType":"module"}