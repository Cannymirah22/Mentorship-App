{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sweet\\\\Desktop\\\\STEPuHP App Dev opp\\\\client\\\\src\\\\components\\\\notification\\\\Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { markNotificationRead } from \"../../actions/notification\";\nimport DoubleTickIcon from \"../../assets/icons/DoubleTickIcon\";\nimport NotificationTile from \"./NotificationTile\";\nimport Loading from \"../loading/Loading\";\nimport { authContext } from \"../../contexts/authContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Notification = ({\n  myStyle,\n  nodeRef,\n  setShowNotificationModal,\n  setShowOverlay,\n  setModalContent\n}) => {\n  _s();\n\n  // getting uid of the logged in user\n  const {\n    uid\n  } = useContext(authContext);\n  const dispatch = useDispatch();\n  const history = useHistory(); // getting all notifications from the state\n\n  const {\n    notifications\n  } = useSelector(state => state.notification);\n  console.log(\"notifications from state\", notifications);\n\n  const handleMarkAllRead = () => {\n    setLoading(true);\n    let ids = [];\n    notifications.forEach(notification => {\n      if (notification.receivers.find(r => r.user._id.toString() === uid.toString() && !r.read)) {\n        ids.push({\n          id: notification._id,\n          willReceive: true\n        });\n      }\n    });\n    dispatch(markNotificationRead(history, ids, setLoading));\n  }; // loading state for mark all read\n\n\n  const [loading, setLoading] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: nodeRef,\n    className: `${myStyle} h-96 w-96 bg-gray-600 absolute z-10 top-12 -right-4 rounded-md px-3 py-2`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full w-full flex flex-col items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex items-center justify-start mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-white\",\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-full overflow-auto w-full cursor-pointer\",\n        children: notifications.sort((a, b) => {\n          return a.createdAt < b.createdAt ? 1 : -1;\n        }).map(notification => /*#__PURE__*/_jsxDEV(NotificationTile, { ...notification,\n          setShowNotificationModal: setShowNotificationModal,\n          setShowOverlay: setShowOverlay,\n          setModalContent: setModalContent\n        }, notification._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleMarkAllRead,\n          className: \"text-white w-full bg-gray-700 p-2 hover:bg-gray-800 transition-all text-sm flex items-center justify-center gap-x-2 mt-2 rounded-md\",\n          children: loading ? /*#__PURE__*/_jsxDEV(Loading, {\n            myStyle: \"h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(DoubleTickIcon, {\n              myStyle: \"h-4 w-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), \"Mark all read\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notification, \"meiV846vHDVuAXmRn8hvrhUVwZQ=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = Notification;\nexport default Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["C:/Users/sweet/Desktop/STEPuHP App Dev opp/client/src/components/notification/Notification.js"],"names":["React","useContext","useState","useDispatch","useSelector","useHistory","markNotificationRead","DoubleTickIcon","NotificationTile","Loading","authContext","Notification","myStyle","nodeRef","setShowNotificationModal","setShowOverlay","setModalContent","uid","dispatch","history","notifications","state","notification","console","log","handleMarkAllRead","setLoading","ids","forEach","receivers","find","r","user","_id","toString","read","push","id","willReceive","loading","sort","a","b","createdAt","map"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { markNotificationRead } from \"../../actions/notification\";\nimport DoubleTickIcon from \"../../assets/icons/DoubleTickIcon\";\nimport NotificationTile from \"./NotificationTile\";\nimport Loading from \"../loading/Loading\";\nimport { authContext } from \"../../contexts/authContext\";\n\nconst Notification = ({\n    myStyle,\n    nodeRef,\n    setShowNotificationModal,\n    setShowOverlay,\n    setModalContent,\n}) => {\n    // getting uid of the logged in user\n    const { uid } = useContext(authContext);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // getting all notifications from the state\n    const { notifications } = useSelector((state) => state.notification);\n\n    console.log(\"notifications from state\", notifications);\n\n    const handleMarkAllRead = () => {\n        setLoading(true);\n        let ids = [];\n        notifications.forEach((notification) => {\n            if (\n                notification.receivers.find(\n                    (r) => r.user._id.toString() === uid.toString() && !r.read\n                )\n            ) {\n                ids.push({ id: notification._id, willReceive: true });\n            }\n        });\n        dispatch(markNotificationRead(history, ids, setLoading));\n    };\n\n    // loading state for mark all read\n    const [loading, setLoading] = useState(false);\n\n    return (\n        <div\n            ref={nodeRef}\n            className={`${myStyle} h-96 w-96 bg-gray-600 absolute z-10 top-12 -right-4 rounded-md px-3 py-2`}\n        >\n            <div className=\"h-full w-full flex flex-col items-center justify-between\">\n                <div className=\"w-full flex items-center justify-start mb-2\">\n                    <h4 className=\"text-white\">Notifications</h4>\n                </div>\n                <div className=\"h-full overflow-auto w-full cursor-pointer\">\n                    {notifications\n                        .sort((a, b) => {\n                            return a.createdAt < b.createdAt ? 1 : -1;\n                        })\n                        .map((notification) => (\n                            <NotificationTile\n                                key={notification._id}\n                                {...notification}\n                                setShowNotificationModal={setShowNotificationModal}\n                                setShowOverlay={setShowOverlay}\n                                setModalContent={setModalContent}\n                            />\n                        ))}\n                </div>\n                <div className=\"w-full\">\n                    <button\n                        onClick={handleMarkAllRead}\n                        className=\"text-white w-full bg-gray-700 p-2 hover:bg-gray-800 transition-all text-sm flex items-center justify-center gap-x-2 mt-2 rounded-md\"\n                    >\n                        {loading ? (\n                            <Loading myStyle={\"h-5 w-5\"} />\n                        ) : (\n                            <>\n                                <DoubleTickIcon myStyle={\"h-4 w-4\"} />\n                                Mark all read\n                            </>\n                        )}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Notification;\n"]},"metadata":{},"sourceType":"module"}