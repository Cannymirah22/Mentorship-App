{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport * as api from \"../api/post\";\nimport { showToast } from \"../components/toast/toast\";\nexport const getAllPosts = (history, page, setPostLoading) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchAllPost(page);\n    console.log(\"posts in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      if (setPostLoading !== undefined) setPostLoading(false);\n      const posts = data.data.posts;\n      return dispatch({\n        type: \"FETCH_POSTS\",\n        posts\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getOlderPosts = (history, page, setOldPostLoading) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchAllPost(page);\n    console.log(\"older posts get data\", data);\n\n    if (data.code === 200) {\n      const posts = data.data.posts;\n      dispatch({\n        type: \"FETCH_OLDER_POSTS\",\n        posts\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n\n    setOldPostLoading(false);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const submitPost = (history, post, socket, executeScroll) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.submitPost(post);\n    console.log(\"submit post in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const post = data.data;\n      dispatch({\n        type: \"ADD_SINGLE_POST\",\n        post\n      });\n      executeScroll();\n      socket.emit(\"newNotification\", post.postData);\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (history, postId, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(post, postId);\n    console.log(\"update post in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const post = data.data.post;\n      dispatch({\n        type: \"UPDATE_POST\",\n        post\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = (history, postId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deletePost(postId);\n    console.log(\"delete post in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const post = data.data.post;\n      dispatch({\n        type: \"DELETE_POST\",\n        post\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchPostComments = (history, postId, setCommentLoading) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPostComments(postId);\n    console.log(\"fetched comments in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const comments = data.data.comments;\n      dispatch({\n        type: \"FETCH_COMMENTS\",\n        comments\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n\n    setCommentLoading(false);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const submitComment = (history, comment, executeScrollToComment, postId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.submitComment(comment, postId);\n    console.log(\"submit comment in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const comment = data.data.comment;\n      const post = data.data.post;\n      dispatch({\n        type: \"ADD_SINGLE_COMMENT\",\n        comment\n      });\n      dispatch({\n        type: \"UPDATE_POST\",\n        post\n      });\n      executeScrollToComment();\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteComment = (history, commentId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.deleteComment(commentId);\n    console.log(\"delete comment in actions\", data); //check if the response data is error\n\n    if (data.code === 200) {\n      const post = data.data.post;\n      const comment = data.data.comment;\n      dispatch({\n        type: \"DELETE_COMMENT\",\n        comment\n      });\n      dispatch({\n        type: \"UPDATE_POST\",\n        post\n      });\n    } else {\n      showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logoutPosts = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LOGOUT_POSTS\"\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/sweet/Desktop/STEPuHP App Dev opp/client/src/actions/post.js"],"names":["toast","api","showToast","getAllPosts","history","page","setPostLoading","dispatch","data","fetchAllPost","console","log","code","undefined","posts","type","msg","POSITION","BOTTOM_LEFT","error","getOlderPosts","setOldPostLoading","submitPost","post","socket","executeScroll","emit","postData","updatePost","postId","deletePost","fetchPostComments","setCommentLoading","comments","submitComment","comment","executeScrollToComment","deleteComment","commentId","logoutPosts"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,cAAhB,KAAmC,MAAOC,QAAP,IAAoB;AAC9E,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACQ,YAAJ,CAAiBJ,IAAjB,CAAvB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,IAAhC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,UAAIN,cAAc,KAAKO,SAAvB,EAAkCP,cAAc,CAAC,KAAD,CAAd;AAClC,YAAMQ,KAAK,GAAGN,IAAI,CAACA,IAAL,CAAUM,KAAxB;AACA,aAAOP,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,aAAR;AAAuBD,QAAAA;AAAvB,OAAD,CAAf;AACH,KAJD,MAIO;AACHZ,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAZD,CAYE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMC,aAAa,GAAG,CAAChB,OAAD,EAAUC,IAAV,EAAgBgB,iBAAhB,KAAsC,MAAOd,QAAP,IAAoB;AACnF,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACQ,YAAJ,CAAiBJ,IAAjB,CAAvB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,IAApC;;AAEA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAME,KAAK,GAAGN,IAAI,CAACA,IAAL,CAAUM,KAAxB;AACAP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,mBAAR;AAA6BD,QAAAA;AAA7B,OAAD,CAAR;AACH,KAHD,MAGO;AACHZ,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;;AACDG,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAXD,CAWE,OAAOF,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMG,UAAU,GAAG,CAAClB,OAAD,EAAUmB,IAAV,EAAgBC,MAAhB,EAAwBC,aAAxB,KAA0C,MAAOlB,QAAP,IAAoB;AACpF,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACqB,UAAJ,CAAeC,IAAf,CAAvB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,IAAtC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMW,IAAI,GAAGf,IAAI,CAACA,IAAlB;AACAD,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,iBAAR;AAA2BQ,QAAAA;AAA3B,OAAD,CAAR;AACAE,MAAAA,aAAa;AACbD,MAAAA,MAAM,CAACE,IAAP,CAAY,iBAAZ,EAA+BH,IAAI,CAACI,QAApC;AACH,KALD,MAKO;AACHzB,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAjBM;AAmBP,OAAO,MAAMS,UAAU,GAAG,CAACxB,OAAD,EAAUyB,MAAV,EAAkBN,IAAlB,KAA2B,MAAOhB,QAAP,IAAoB;AACrE,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC2B,UAAJ,CAAeL,IAAf,EAAqBM,MAArB,CAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,IAAtC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMW,IAAI,GAAGf,IAAI,CAACA,IAAL,CAAUe,IAAvB;AACAhB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,aAAR;AAAuBQ,QAAAA;AAAvB,OAAD,CAAR;AACH,KAHD,MAGO;AACHrB,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMW,UAAU,GAAG,CAAC1B,OAAD,EAAUyB,MAAV,KAAqB,MAAOtB,QAAP,IAAoB;AAC/D,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC6B,UAAJ,CAAeD,MAAf,CAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,IAAtC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMW,IAAI,GAAGf,IAAI,CAACA,IAAL,CAAUe,IAAvB;AACAhB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,aAAR;AAAuBQ,QAAAA;AAAvB,OAAD,CAAR;AACH,KAHD,MAGO;AACHrB,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMY,iBAAiB,GAAG,CAAC3B,OAAD,EAAUyB,MAAV,EAAkBG,iBAAlB,KAAwC,MAAOzB,QAAP,IAAoB;AACzF,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAAC8B,iBAAJ,CAAsBF,MAAtB,CAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,IAA3C,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMqB,QAAQ,GAAGzB,IAAI,CAACA,IAAL,CAAUyB,QAA3B;AACA1B,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,gBAAR;AAA0BkB,QAAAA;AAA1B,OAAD,CAAR;AACH,KAHD,MAGO;AACH/B,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;;AACDc,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAZD,CAYE,OAAOb,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMe,aAAa,GACtB,CAAC9B,OAAD,EAAU+B,OAAV,EAAmBC,sBAAnB,EAA2CP,MAA3C,KAAsD,MAAOtB,QAAP,IAAoB;AACtE,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACiC,aAAJ,CAAkBC,OAAlB,EAA2BN,MAA3B,CAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,IAAzC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMuB,OAAO,GAAG3B,IAAI,CAACA,IAAL,CAAU2B,OAA1B;AACA,YAAMZ,IAAI,GAAGf,IAAI,CAACA,IAAL,CAAUe,IAAvB;AACAhB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,oBAAR;AAA8BoB,QAAAA;AAA9B,OAAD,CAAR;AACA5B,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,aAAR;AAAuBQ,QAAAA;AAAvB,OAAD,CAAR;AACAa,MAAAA,sBAAsB;AACzB,KAND,MAMO;AACHlC,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAdD,CAcE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAnBE;AAqBP,OAAO,MAAMkB,aAAa,GAAG,CAACjC,OAAD,EAAUkC,SAAV,KAAwB,MAAO/B,QAAP,IAAoB;AACrE,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACoC,aAAJ,CAAkBC,SAAlB,CAAvB;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,IAAzC,EAFA,CAIA;;AACA,QAAIA,IAAI,CAACI,IAAL,KAAc,GAAlB,EAAuB;AACnB,YAAMW,IAAI,GAAGf,IAAI,CAACA,IAAL,CAAUe,IAAvB;AACA,YAAMY,OAAO,GAAG3B,IAAI,CAACA,IAAL,CAAU2B,OAA1B;AACA5B,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,gBAAR;AAA0BoB,QAAAA;AAA1B,OAAD,CAAR;AACA5B,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,aAAR;AAAuBQ,QAAAA;AAAvB,OAAD,CAAR;AACH,KALD,MAKO;AACHrB,MAAAA,SAAS,CAAC,OAAD,EAAUM,IAAI,CAACQ,GAAf,EAAoB,KAApB,EAA2BhB,KAAK,CAACiB,QAAN,CAAeC,WAA1C,CAAT;AACH;AACJ,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CAjBM;AAmBP,OAAO,MAAMoB,WAAW,GAAG,MAAM,MAAOhC,QAAP,IAAoB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAFD,CAEE,OAAOI,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AACJ,CANM","sourcesContent":["import { toast } from \"react-toastify\";\nimport * as api from \"../api/post\";\nimport { showToast } from \"../components/toast/toast\";\n\nexport const getAllPosts = (history, page, setPostLoading) => async (dispatch) => {\n    try {\n        const { data } = await api.fetchAllPost(page);\n        console.log(\"posts in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            if (setPostLoading !== undefined) setPostLoading(false);\n            const posts = data.data.posts;\n            return dispatch({ type: \"FETCH_POSTS\", posts });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getOlderPosts = (history, page, setOldPostLoading) => async (dispatch) => {\n    try {\n        const { data } = await api.fetchAllPost(page);\n        console.log(\"older posts get data\", data);\n\n        if (data.code === 200) {\n            const posts = data.data.posts;\n            dispatch({ type: \"FETCH_OLDER_POSTS\", posts });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n        setOldPostLoading(false);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const submitPost = (history, post, socket, executeScroll) => async (dispatch) => {\n    try {\n        const { data } = await api.submitPost(post);\n        console.log(\"submit post in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const post = data.data;\n            dispatch({ type: \"ADD_SINGLE_POST\", post });\n            executeScroll();\n            socket.emit(\"newNotification\", post.postData);\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const updatePost = (history, postId, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(post, postId);\n        console.log(\"update post in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const post = data.data.post;\n            dispatch({ type: \"UPDATE_POST\", post });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const deletePost = (history, postId) => async (dispatch) => {\n    try {\n        const { data } = await api.deletePost(postId);\n        console.log(\"delete post in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const post = data.data.post;\n            dispatch({ type: \"DELETE_POST\", post });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchPostComments = (history, postId, setCommentLoading) => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPostComments(postId);\n        console.log(\"fetched comments in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const comments = data.data.comments;\n            dispatch({ type: \"FETCH_COMMENTS\", comments });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n        setCommentLoading(false);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const submitComment =\n    (history, comment, executeScrollToComment, postId) => async (dispatch) => {\n        try {\n            const { data } = await api.submitComment(comment, postId);\n            console.log(\"submit comment in actions\", data);\n\n            //check if the response data is error\n            if (data.code === 200) {\n                const comment = data.data.comment;\n                const post = data.data.post;\n                dispatch({ type: \"ADD_SINGLE_COMMENT\", comment });\n                dispatch({ type: \"UPDATE_POST\", post });\n                executeScrollToComment();\n            } else {\n                showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\nexport const deleteComment = (history, commentId) => async (dispatch) => {\n    try {\n        const { data } = await api.deleteComment(commentId);\n        console.log(\"delete comment in actions\", data);\n\n        //check if the response data is error\n        if (data.code === 200) {\n            const post = data.data.post;\n            const comment = data.data.comment;\n            dispatch({ type: \"DELETE_COMMENT\", comment });\n            dispatch({ type: \"UPDATE_POST\", post });\n        } else {\n            showToast(\"error\", data.msg, 10000, toast.POSITION.BOTTOM_LEFT);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const logoutPosts = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"LOGOUT_POSTS\" });\n    } catch (error) {\n        console.log(error);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}